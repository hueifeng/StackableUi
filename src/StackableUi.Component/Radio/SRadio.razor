@{
    if (RadioGroup != null)
    {
        checkValue = RadioGroup.Text;
    }
    var ischeck = checkValue == Value;

    var clasDisabled = string.Empty;
    if (Disabled)
    {
        clasDisabled = "ivu-radio-disabled";
    }
}

<label  @onclick="OnRadioChanged"  class="ivu-radio-wrapper ivu-radio-group-item ivu-radio-default @(Border?"ivu-radio-border":"") @(Disabled?"ivu-radio-wrapper-disabled":"")  @(checkValue==Value?"ivu-radio-wrapper-checked":"")  ">
    <span class="ivu-radio @(checkValue==Value?"ivu-radio-checked":"")">
        <span class="ivu-radio @clasDisabled">
            <span class="ivu-radio-inner"></span>
            <input type="radio" disabled="@(Disabled?"disabled":"")" class="ivu-radio-input" value="@Value">
        </span>
    </span>
    @ChildContent
</label>



@code {

    [Parameter] public RenderFragment ChildContent { get; set; }

    private string changedclas = string.Empty;
    /// <summary>
    ///     可以显示边框
    /// </summary>
    [Parameter]
    public bool Border { get; set; }
    [Parameter]
    public bool Disabled { get; set; }


    [CascadingParameter]
    private SRadioGroup RadioGroup { get; set; }


    private string checkValue { get; set; }

    /// <summary>
    ///     值
    /// </summary>
    [Parameter] public string Value { get; set; }
    /// <summary>
    /// 当选择的值发生改变时触发
    /// </summary>
    [Parameter]
    public EventCallback<string> SelectedValueChanged { get; set; }

    protected void OnRadioChanged(MouseEventArgs args)
    {
        if (Disabled)
        {
            return;
        }
        if (RadioGroup != null)
        {
            _ = RadioGroup.TrySetValue(Value, !SelectedValueChanged.HasDelegate);
            return;
        }

        if (SelectedValueChanged.HasDelegate)
        {
            _ = SelectedValueChanged.InvokeAsync(Value);
        }
        checkValue = Value;
    }

}
