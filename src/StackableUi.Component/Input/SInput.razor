@{
    var inputSize = "ivu-input-default";

    if (Size != null)
    {
        inputSize = $"ivu-input-{Size.ToString().ToLower()}";
    }

    string clas = $"ivu-input {inputSize}";
}
@{
    if (Type == InputType.TextArea)
    {
        <div class="ivu-input-wrapper ivu-input-wrapper-default ivu-input-type-textarea" style="@Style">
            <textarea wrap="soft" autocomplete="off" spellcheck="false" placeholder="@Placeholder" rows="2" maxlength="@MaxLength" class="ivu-input"></textarea>

            @if (ShowWordLimit)
            {
                <span class="ivu-input-word-count">@CurrentLength/@MaxLength</span>
            }
        </div>
    }
    else
    {
        <div class="ivu-input-wrapper ivu-input-wrapper-default ivu-input-type-text" style="@Style">

            @if (ShowWordLimit)
            {
                <span class="ivu-input-word-count">@CurrentLength/@MaxLength</span>
            }



            @if (Clearable)
            {
                <!--clearable -->
                <i class="ivu-icon ivu-icon-ios-close-circle ivu-input-icon ivu-input-icon-clear ivu-input-icon-normal" @onclick="OnClickClear"></i>
            }


            <i class="ivu-icon ivu-icon-ios-loading ivu-load-loop ivu-input-icon ivu-input-icon-validate"></i>
            <input type="@Type.ToString().ToLower()" autocomplete="off" @oninput="OnInputEventArgs" maxlength="@MaxLength" spellcheck="false" @onfocus="OnFocusAsync" placeholder="@Placeholder" class="@clas" value="@Value">
        </div>
    }

}





@code {
    /// <summary>
    ///     占位文字
    /// </summary>
    [Parameter] public string Placeholder { get; set; }
    /// <summary>
    ///     样式
    /// </summary>
    [Parameter] public string Style { get; set; }
    /// <summary>
    ///     尺寸
    /// </summary>
    [Parameter] public InputSize? Size { get; set; }
    /// <summary>
    ///     值
    /// </summary>
    private string Value { get; set; }
    /// <summary>
    ///    开启属性 show-word-limit 可以显示字数统计，需配合 maxlength 属性来限制输入长度。
    /// </summary>
    [Parameter] public bool ShowWordLimit { get; set; }
    /// <summary>
    ///    maxlength
    /// </summary>
    [Parameter] public int MaxLength { get; set; } = 1024000;
    /// <summary>
    ///     开启属性 Clearable 可显示清空按钮。
    /// </summary>
    [Parameter] public bool Clearable { get; set; }
    /// <summary>
    ///     当前字符串长度
    /// </summary>
    private int CurrentLength { get; set; }
    /// <summary>
    ///     Input类型 <see cref="InputType"/>
    /// </summary>
    [Parameter] public InputType Type { get; set; } = InputType.Text;
    /// <summary>
    ///     清空内容
    /// </summary>
    protected void OnClickClear()
    {
        this.Value = default;
    }

    protected virtual Task OnFocusAsync()
    {
        if (Value == null)
        {
            Value = default;
        }
        return Task.CompletedTask;
    }

    /// <summary>
    ///     OnInput事件
    /// </summary>
    /// <param name="input"></param>
    protected void OnInputEventArgs(ChangeEventArgs input)
    {
        Value = (string)input.Value;
        if (ShowWordLimit)
        {
            CurrentLength = Value.Length;
        }

    }

}
